import ssl
import socket
from typing import Dict, Any, List


class CryptoFailureHandler:
    async def test_vulnerability(self, target: Dict[str, Any]):
        results = {
            "weak_ciphers": await self._check_ssl_ciphers(target["url"]),
            "weak_protocols": await self._check_ssl_protocols(target["url"]),
            "certificate_issues": await self._check_certificate(target["url"]),
        }

        return {
            "vulnerability_found": any(results.values()),
            "details": results,
            "recommendations": self._generate_recommendations(results),
        }

    async def _check_ssl_ciphers(self, url: str) -> List[str]:
        weak_ciphers = []
        hostname = url.split("://")[-1].split("/")[0]

        context = ssl.create_default_context()
        with socket.create_connection((hostname, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                cipher = ssock.cipher()
                if cipher[0] in ["RC4", "DES", "3DES"]:
                    weak_ciphers.append(cipher[0])

        return weak_ciphers

    async def _check_ssl_protocols(self, url: str) -> Dict[str, bool]:
        hostname = url.split("://")[-1].split("/")[0]
        results = {}

        for protocol in ["SSLv2", "SSLv3", "TLSv1", "TLSv1.1"]:
            try:
                context = ssl.SSLContext(getattr(ssl, f"PROTOCOL_{protocol}"))
                with socket.create_connection((hostname, 443)) as sock:
                    with context.wrap_socket(sock) as ssock:
                        results[protocol] = True
            except:
                results[protocol] = False

        return results

    def _generate_recommendations(self, results: Dict) -> List[str]:
        recommendations = []

        if results["weak_ciphers"]:
            recommendations.append(
                "Disable weak ciphers: " + ", ".join(results["weak_ciphers"])
            )
        if any(results["weak_protocols"].values()):
            recommendations.append(
                "Disable outdated protocols: "
                + ", ".join(
                    p for p, enabled in results["weak_protocols"].items() if enabled
                )
            )

        return recommendations
