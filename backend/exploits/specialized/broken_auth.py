import jwt
import httpx
from typing import Dict, Any


class BrokenAuthHandler:
    async def test_vulnerability(self, target: Dict[str, Any]):
        tests = [
            await self._test_default_credentials(target),
            await self._test_jwt_vulnerabilities(target),
            await self._test_session_management(target),
        ]

        return {
            "vulnerability_found": any(test["vulnerable"] for test in tests),
            "details": tests,
            "recommendations": self._generate_recommendations(tests),
        }

    async def _test_default_credentials(self, target: Dict) -> Dict:
        common_credentials = [
            {"username": "admin", "password": "admin"},
            {"username": "admin", "password": "password"},
            {"username": "root", "password": "root"},
        ]

        async with httpx.AsyncClient() as client:
            for creds in common_credentials:
                response = await client.post(f"{target['url']}/login", json=creds)
                if response.status_code == 200:
                    return {
                        "vulnerable": True,
                        "type": "default_credentials",
                        "credentials": creds,
                    }

        return {"vulnerable": False, "type": "default_credentials"}

    async def _test_jwt_vulnerabilities(self, target: Dict) -> Dict:
        if "jwt" not in target.get("auth_type", "").lower():
            return {"vulnerable": False, "type": "jwt"}

        vulnerabilities = []
        token = target.get("sample_token")

        if token:
            try:
                # Test for none algorithm
                header = jwt.get_unverified_header(token)
                if header["alg"].lower() == "none":
                    vulnerabilities.append("none_algorithm")

                # Test for weak signature
                try:
                    jwt.decode(token, "secret", algorithms=["HS256"])
                    vulnerabilities.append("weak_secret")
                except:
                    pass

            except:
                pass

        return {
            "vulnerable": bool(vulnerabilities),
            "type": "jwt",
            "issues": vulnerabilities,
        }
