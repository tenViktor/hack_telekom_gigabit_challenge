# backend/exploits/specialized/base.py
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any


class VulnerabilityHandler(ABC):
    def __init__(self):
        self.timestamp = datetime.now()

    @abstractmethod
    async def test_vulnerability(self, target: Dict[str, Any]) -> Dict:
        """Test for specific vulnerability"""
        pass

    def create_base_result(self) -> Dict:
        """Create base result structure"""
        return {
            "timestamp": self.timestamp.isoformat(),
            "vulnerability_found": False,
            "details": {},
            "evidence": {},
            "recommendations": [],
        }

    def add_evidence(self, result: Dict, evidence_type: str, evidence: Any):
        """Add evidence to result"""
        if "evidence" not in result:
            result["evidence"] = {}
        result["evidence"][evidence_type] = evidence

    def add_recommendation(self, result: Dict, recommendation: str):
        """Add recommendation to result"""
        if "recommendations" not in result:
            result["recommendations"] = []
        result["recommendations"].append(recommendation)

    async def take_screenshot(self, page) -> str:
        """Take screenshot and save it"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"evidence_{timestamp}.png"
        await page.screenshot(path=f"/data/screenshots/{filename}")
        return filename
