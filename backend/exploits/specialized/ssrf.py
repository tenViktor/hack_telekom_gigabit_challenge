from typing import Dict, List, Any
from datetime import datetime
import httpx


class SSRFHandler:
    async def test_vulnerability(self, target: Dict[str, Any]):
        test_server = await self._setup_test_server()
        test_url = f"http://{test_server.host}:{test_server.port}"

        payload = target["parameters"].copy()
        payload["url"] = test_url

        async with httpx.AsyncClient() as client:
            response = await client.post(target["url"], json=payload)

        await test_server.stop()
        return self._analyze_results(response, test_server.requests)

    def _analyze_results(self, response, server_requests: List) -> Dict:
        """Analyze SSRF test results"""
        result = {
            "timestamp": datetime.now().isoformat(),
            "vulnerability_found": False,
            "details": {
                "request_received": bool(server_requests),
                "number_of_requests": len(server_requests),
                "request_methods": list(set(req.method for req in server_requests)),
            },
            "evidence": {
                "original_response": {
                    "status_code": response.status_code,
                    "headers": dict(response.headers),
                    "body": response.text[:1000],
                },
                "received_requests": [
                    {
                        "method": req.method,
                        "headers": dict(req.headers),
                        "body": req.body.decode()[:1000] if req.body else None,
                    }
                    for req in server_requests[:5]  # First 5 requests
                ],
            },
        }

        if server_requests:
            result["vulnerability_found"] = True
            result["recommendations"] = [
                "Implement URL validation",
                "Use allowlist for allowed domains",
                "Configure firewall rules to prevent internal network access",
                "Implement rate limiting for URL requests",
            ]

        return result

    async def _setup_test_server(self):
        """Set up a test server to detect SSRF attempts"""
        from aiohttp import web

        class TestServer:
            def __init__(self):
                self.requests = []
                self.app = web.Application()
                self.app.router.add_route("*", "/{tail:.*}", self._handle_request)
                self.runner = web.AppRunner(self.app)
                self.host: str = "localhost"

            async def start(self):
                await self.runner.setup()
                site = web.TCPSite(self.runner, "localhost", 0)
                await site.start()
                self.host, self.port = site._server.sockets[0].getsockname()
                return self.host, self.port

            async def stop(self):
                await self.runner.cleanup()

            async def _handle_request(self, request):
                self.requests.append(
                    {
                        "method": request.method,
                        "path": request.path,
                        "headers": dict(request.headers),
                        "body": await request.read(),
                    }
                )
                return web.Response(text="test server response")

        server = TestServer()
        host, port = await server.start()
        server.host = host
        server.port = port
        return server
