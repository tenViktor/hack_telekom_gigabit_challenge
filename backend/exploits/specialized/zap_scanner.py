from zapv2 import ZAPv2
import time
from typing import Dict, Any, List


class ZAPScanner:
    def __init__(self):
        self.zap = ZAPv2(
            apikey=os.getenv("ZAP_API_KEY"),
            proxies={"http": "http://localhost:8080", "https": "http://localhost:8080"},
        )

    async def test_vulnerability(self, target: Dict[str, Any]):
        # Start ZAP session
        self.zap.core.new_session()

        # Access the target
        self.zap.urlopen(target["url"])

        # Spider the target
        scan_id = self.zap.spider.scan(target["url"])
        while int(self.zap.spider.status(scan_id)) < 100:
            time.sleep(1)

        # Active scan
        scan_id = self.zap.ascan.scan(target["url"])
        while int(self.zap.ascan.status(scan_id)) < 100:
            time.sleep(1)

        # Get results
        alerts = self.zap.core.alerts()

        return {
            "vulnerability_found": bool(alerts),
            "details": self._process_alerts(alerts),
            "recommendations": self._generate_recommendations(alerts),
        }

    def _process_alerts(self, alerts: List[Dict]) -> Dict:
        processed = {"high": [], "medium": [], "low": []}

        for alert in alerts:
            processed[alert["risk"].lower()].append(
                {
                    "name": alert["name"],
                    "description": alert["description"],
                    "evidence": alert["evidence"],
                    "solution": alert["solution"],
                }
            )

        return processed
