from bs4 import BeautifulSoup
import httpx
from typing import Dict, Any


class XSSHandler:
    async def test_vulnerability(self, target: Dict[str, Any]):
        payloads = [
            "<script>alert(1)</script>",
            '"><script>alert(1)</script>',
            "<img src=x onerror=alert(1)>",
            '"+alert(1)+"',
            "javascript:alert(1)",
        ]

        results = []
        async with httpx.AsyncClient() as client:
            for payload in payloads:
                # Test GET parameters
                params = {k: payload for k in target.get("parameters", {}).keys()}
                response = await client.get(target["url"], params=params)

                # Analyze response
                if payload in response.text:
                    results.append(
                        {
                            "payload": payload,
                            "parameter": "GET params",
                            "evidence": response.text[:200],
                        }
                    )

                # Test POST parameters
                data = {k: payload for k in target.get("parameters", {}).keys()}
                response = await client.post(target["url"], data=data)

                soup = BeautifulSoup(response.text, "html.parser")
                if self._check_xss_reflection(soup, payload):
                    results.append(
                        {
                            "payload": payload,
                            "parameter": "POST data",
                            "evidence": response.text[:200],
                        }
                    )

        return {
            "vulnerability_found": bool(results),
            "details": results,
            "recommendations": [
                "Implement Content-Security-Policy (CSP)",
                "Use HTML encoding for user input",
                "Sanitize all user input before rendering",
                "Use modern framework's built-in XSS protection",
            ],
        }

    def _check_xss_reflection(self, soup: BeautifulSoup, payload: str) -> bool:
        # Check script tags
        for script in soup.find_all("script"):
            if payload in script.string:
                return True

        # Check attributes
        for tag in soup.find_all(True):
            for attr in tag.attrs:
                if payload in str(tag[attr]):
                    return True

        return False
