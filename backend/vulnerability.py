from sqlalchemy import Column, Integer, String, DateTime, JSON, Enum as SQLEnum
from database import Base
from datetime import datetime
from enum import Enum


# Define severity levels as enum
class Severity(str, Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


# Database model for vulnerabilities
class Vulnerability(Base):
    __tablename__ = "vulnerabilities"  # Table name in SQLite

    # Columns
    id = Column(Integer, primary_key=True)  # Auto-incrementing ID
    cve_id = Column(String, unique=True, nullable=True)  # CVE identifier (optional)
    cwe_id = Column(String)  # CWE identifier
    name = Column(String, nullable=False)  # Vulnerability name
    description = Column(String)  # Description
    severity = Column(SQLEnum(Severity))  # Severity level
    exploit_module = Column(String)  # Name of exploit module
    parameters = Column(JSON)  # JSON field for exploit parameters
    created_at = Column(DateTime, default=datetime.now)  # Creation timestamp
    updated_at = Column(  # Last update timestamp
        DateTime, default=datetime.now, onupdate=datetime.now
    )


# Usage example:
# new_vuln = Vulnerability(
#     cve_id="CVE-2023-1234",
#     name="SQL Injection",
#     severity=Severity.HIGH,
#     parameters={"payload": "' OR '1'='1"}
# )
