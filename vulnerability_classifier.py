from enum import Enum
from typing import Tuple


class VulnerabilityType(Enum):
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    BROKEN_AUTH = "broken_auth"
    SENSITIVE_DATA = "sensitive_data"
    XXE = "xxe"
    BROKEN_ACCESS = "broken_access"
    SECURITY_MISCONFIG = "security_misconfig"
    PATH_TRAVERSAL = "path_traversal"
    INSECURE_DESERIALIZATION = "insecure_deserialization"
    COMPONENTS = "vulnerable_components"
    INSUFFICIENT_LOGGING = "insufficient_logging"
    UNKNOWN = "unknown"


def classify_vulnerability(
    vulnerability: str, details: str
) -> Tuple[VulnerabilityType, bool]:
    vuln_lower = vulnerability.lower()
    details_lower = details.lower()

    # Create classification patterns
    patterns = {
        VulnerabilityType.SQL_INJECTION: [
            "sql",
            "injection",
            "sqli",
            "database",
            "query",
            "blind sql",
        ],
        VulnerabilityType.XSS: [
            "xss",
            "cross-site",
            "script",
            "javascript injection",
            "dom",
            "stored xss",
            "reflected",
        ],
        VulnerabilityType.BROKEN_AUTH: [
            "auth",
            "login",
            "password",
            "session",
            "jwt",
            "token",
            "credentials",
            "authentication",
        ],
        VulnerabilityType.SENSITIVE_DATA: [
            "sensitive",
            "exposure",
            "data leak",
            "information disclosure",
            "pii",
            "confidential",
        ],
        VulnerabilityType.SECURITY_MISCONFIG: [
            "misconfiguration",
            "default",
            "config",
            "header",
            "cors",
            "csrf",
            "security headers",
        ],
        VulnerabilityType.PATH_TRAVERSAL: [
            "path",
            "traversal",
            "directory",
            "lfi",
            "rfi",
            "file inclusion",
            "../",
            "file read",
        ],
        VulnerabilityType.INSECURE_DESERIALIZATION: [
            "deserial",
            "serial",
            "object injection",
            "yaml",
            "xml",
            "json",
        ],
    }

    # Map of which vulnerabilities can be tested with Playwright
    playwright_testable = {
        VulnerabilityType.SQL_INJECTION: True,
        VulnerabilityType.XSS: True,
        VulnerabilityType.BROKEN_AUTH: True,
        VulnerabilityType.PATH_TRAVERSAL: True,
        VulnerabilityType.SECURITY_MISCONFIG: True,
        VulnerabilityType.SENSITIVE_DATA: False,
        VulnerabilityType.INSECURE_DESERIALIZATION: False,
    }

    # Check for matches
    for vuln_type, keywords in patterns.items():
        if any(
            keyword in vuln_lower or keyword in details_lower for keyword in keywords
        ):
            return vuln_type, playwright_testable.get(vuln_type, False)

    return VulnerabilityType.UNKNOWN, False
