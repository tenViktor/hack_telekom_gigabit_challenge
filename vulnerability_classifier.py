from enum import Enum
from typing import Tuple


class VulnerabilityType(Enum):
    SQL_INJECTION = "sql_injection"
    XSS = "xss"
    BROKEN_AUTH = "broken_auth"
    SENSITIVE_DATA = "sensitive_data"
    XXE = "xxe"
    BROKEN_ACCESS = "broken_access"
    SECURITY_MISCONFIG = "security_misconfig"
    INSECURE_DESERIALIZATION = "insecure_deserialization"
    COMPONENTS = "vulnerable_components"
    INSUFFICIENT_LOGGING = "insufficient_logging"
    UNKNOWN = "unknown"


def classify_vulnerability(
    vulnerability: str, details: str
) -> Tuple[VulnerabilityType, bool]:
    """
    Classifies vulnerability and determines if it can be automated with Playwright
    Returns: (vulnerability_type, can_use_playwright)
    """
    vuln_lower = vulnerability.lower()
    details_lower = details.lower()

    # SQL Injection detection
    if any(x in vuln_lower or x in details_lower for x in ["sql", "injection", "sqli"]):
        return VulnerabilityType.SQL_INJECTION, True

    # XSS detection
    if any(
        x in vuln_lower or x in details_lower for x in ["xss", "cross-site", "script"]
    ):
        return VulnerabilityType.XSS, True

    # Authentication issues
    if any(
        x in vuln_lower or x in details_lower for x in ["auth", "login", "password"]
    ):
        return VulnerabilityType.BROKEN_AUTH, True

    # Sensitive data exposure
    if any(
        x in vuln_lower or x in details_lower
        for x in ["sensitive", "exposure", "data leak"]
    ):
        return VulnerabilityType.SENSITIVE_DATA, False

    # XXE
    if "xxe" in vuln_lower or "xml" in vuln_lower:
        return VulnerabilityType.XXE, False

    return VulnerabilityType.UNKNOWN, False
